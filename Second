{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.048997,
     "end_time": "2024-04-18T21:44:44.593998",
     "exception": false,
     "start_time": "2024-04-18T21:44:44.545001",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Classification of Cancer by Gene Expression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.047296,
     "end_time": "2024-04-18T21:44:44.689343",
     "exception": false,
     "start_time": "2024-04-18T21:44:44.642047",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The dataset showes how new cases of cancer could be classified by gene expression monitoring (via DNA microarray) and thereby provided a general approach for identifying new cancer classes and assigning tumors to known classes. These data were used to classify patients with acute myeloid leukemia (AML) and acute lymphoblastic leukemia (ALL)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:44.831658Z",
     "iopub.status.busy": "2024-04-18T21:44:44.830976Z",
     "iopub.status.idle": "2024-04-18T21:44:44.839621Z",
     "shell.execute_reply": "2024-04-18T21:44:44.838933Z",
     "shell.execute_reply.started": "2024-04-18T21:33:55.193791Z"
    },
    "papermill": {
     "duration": 0.101625,
     "end_time": "2024-04-18T21:44:44.839724",
     "exception": false,
     "start_time": "2024-04-18T21:44:44.738099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/gene-expression/data_set_ALL_AML_independent.csv\n",
      "/kaggle/input/gene-expression/data_set_ALL_AML_train.csv\n",
      "/kaggle/input/gene-expression/actual.csv\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.047497,
     "end_time": "2024-04-18T21:44:44.936808",
     "exception": false,
     "start_time": "2024-04-18T21:44:44.889311",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Load all the required libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:45.044190Z",
     "iopub.status.busy": "2024-04-18T21:44:45.043474Z",
     "iopub.status.idle": "2024-04-18T21:44:49.845442Z",
     "shell.execute_reply": "2024-04-18T21:44:49.844753Z",
     "shell.execute_reply.started": "2024-04-18T21:33:55.215201Z"
    },
    "papermill": {
     "duration": 4.860544,
     "end_time": "2024-04-18T21:44:49.845568",
     "exception": false,
     "start_time": "2024-04-18T21:44:44.985024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "import xgboost as xgb\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "from sklearn.metrics import recall_score, precision_score, classification_report,accuracy_score,confusion_matrix, roc_curve, auc, roc_curve,accuracy_score,plot_confusion_matrix\n",
    "from sklearn.preprocessing import StandardScaler, normalize\n",
    "from sklearn.decomposition import PCA\n",
    "from scipy import ndimage\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.049382,
     "end_time": "2024-04-18T21:44:49.943815",
     "exception": false,
     "start_time": "2024-04-18T21:44:49.894433",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "https://www.kaggle.com/crawford/gene-expression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.049068,
     "end_time": "2024-04-18T21:44:50.041386",
     "exception": false,
     "start_time": "2024-04-18T21:44:49.992318",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Load dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:50.150047Z",
     "iopub.status.busy": "2024-04-18T21:44:50.149410Z",
     "iopub.status.idle": "2024-04-18T21:44:50.404915Z",
     "shell.execute_reply": "2024-04-18T21:44:50.404342Z",
     "shell.execute_reply.started": "2024-04-18T21:33:58.159375Z"
    },
    "papermill": {
     "duration": 0.314936,
     "end_time": "2024-04-18T21:44:50.405046",
     "exception": false,
     "start_time": "2024-04-18T21:44:50.090110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Load dataset\n",
    "Train_Data = pd.read_csv(\"../input/gene-expression/data_set_ALL_AML_train.csv\")\n",
    "Test_Data = pd.read_csv(\"../input/gene-expression/data_set_ALL_AML_independent.csv\")\n",
    "labels = pd.read_csv(\"../input/gene-expression/actual.csv\", index_col = 'patient')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:50.526870Z",
     "iopub.status.busy": "2024-04-18T21:44:50.515584Z",
     "iopub.status.idle": "2024-04-18T21:44:50.541841Z",
     "shell.execute_reply": "2024-04-18T21:44:50.542434Z",
     "shell.execute_reply.started": "2024-04-18T21:33:58.460288Z"
    },
    "papermill": {
     "duration": 0.088684,
     "end_time": "2024-04-18T21:44:50.542581",
     "exception": false,
     "start_time": "2024-04-18T21:44:50.453897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gene Description</th>\n",
       "      <th>Gene Accession Number</th>\n",
       "      <th>1</th>\n",
       "      <th>call</th>\n",
       "      <th>2</th>\n",
       "      <th>call.1</th>\n",
       "      <th>3</th>\n",
       "      <th>call.2</th>\n",
       "      <th>4</th>\n",
       "      <th>call.3</th>\n",
       "      <th>...</th>\n",
       "      <th>29</th>\n",
       "      <th>call.33</th>\n",
       "      <th>30</th>\n",
       "      <th>call.34</th>\n",
       "      <th>31</th>\n",
       "      <th>call.35</th>\n",
       "      <th>32</th>\n",
       "      <th>call.36</th>\n",
       "      <th>33</th>\n",
       "      <th>call.37</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AFFX-BioB-5_at (endogenous control)</td>\n",
       "      <td>AFFX-BioB-5_at</td>\n",
       "      <td>-214</td>\n",
       "      <td>A</td>\n",
       "      <td>-139</td>\n",
       "      <td>A</td>\n",
       "      <td>-76</td>\n",
       "      <td>A</td>\n",
       "      <td>-135</td>\n",
       "      <td>A</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>A</td>\n",
       "      <td>-318</td>\n",
       "      <td>A</td>\n",
       "      <td>-32</td>\n",
       "      <td>A</td>\n",
       "      <td>-124</td>\n",
       "      <td>A</td>\n",
       "      <td>-135</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AFFX-BioB-M_at (endogenous control)</td>\n",
       "      <td>AFFX-BioB-M_at</td>\n",
       "      <td>-153</td>\n",
       "      <td>A</td>\n",
       "      <td>-73</td>\n",
       "      <td>A</td>\n",
       "      <td>-49</td>\n",
       "      <td>A</td>\n",
       "      <td>-114</td>\n",
       "      <td>A</td>\n",
       "      <td>...</td>\n",
       "      <td>-114</td>\n",
       "      <td>A</td>\n",
       "      <td>-192</td>\n",
       "      <td>A</td>\n",
       "      <td>-49</td>\n",
       "      <td>A</td>\n",
       "      <td>-79</td>\n",
       "      <td>A</td>\n",
       "      <td>-186</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AFFX-BioB-3_at (endogenous control)</td>\n",
       "      <td>AFFX-BioB-3_at</td>\n",
       "      <td>-58</td>\n",
       "      <td>A</td>\n",
       "      <td>-1</td>\n",
       "      <td>A</td>\n",
       "      <td>-307</td>\n",
       "      <td>A</td>\n",
       "      <td>265</td>\n",
       "      <td>A</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>A</td>\n",
       "      <td>-95</td>\n",
       "      <td>A</td>\n",
       "      <td>49</td>\n",
       "      <td>A</td>\n",
       "      <td>-37</td>\n",
       "      <td>A</td>\n",
       "      <td>-70</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AFFX-BioC-5_at (endogenous control)</td>\n",
       "      <td>AFFX-BioC-5_at</td>\n",
       "      <td>88</td>\n",
       "      <td>A</td>\n",
       "      <td>283</td>\n",
       "      <td>A</td>\n",
       "      <td>309</td>\n",
       "      <td>A</td>\n",
       "      <td>12</td>\n",
       "      <td>A</td>\n",
       "      <td>...</td>\n",
       "      <td>193</td>\n",
       "      <td>A</td>\n",
       "      <td>312</td>\n",
       "      <td>A</td>\n",
       "      <td>230</td>\n",
       "      <td>P</td>\n",
       "      <td>330</td>\n",
       "      <td>A</td>\n",
       "      <td>337</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AFFX-BioC-3_at (endogenous control)</td>\n",
       "      <td>AFFX-BioC-3_at</td>\n",
       "      <td>-295</td>\n",
       "      <td>A</td>\n",
       "      <td>-264</td>\n",
       "      <td>A</td>\n",
       "      <td>-376</td>\n",
       "      <td>A</td>\n",
       "      <td>-419</td>\n",
       "      <td>A</td>\n",
       "      <td>...</td>\n",
       "      <td>-51</td>\n",
       "      <td>A</td>\n",
       "      <td>-139</td>\n",
       "      <td>A</td>\n",
       "      <td>-367</td>\n",
       "      <td>A</td>\n",
       "      <td>-188</td>\n",
       "      <td>A</td>\n",
       "      <td>-407</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 78 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Gene Description Gene Accession Number    1 call    2  \\\n",
       "0  AFFX-BioB-5_at (endogenous control)        AFFX-BioB-5_at -214    A -139   \n",
       "1  AFFX-BioB-M_at (endogenous control)        AFFX-BioB-M_at -153    A  -73   \n",
       "2  AFFX-BioB-3_at (endogenous control)        AFFX-BioB-3_at  -58    A   -1   \n",
       "3  AFFX-BioC-5_at (endogenous control)        AFFX-BioC-5_at   88    A  283   \n",
       "4  AFFX-BioC-3_at (endogenous control)        AFFX-BioC-3_at -295    A -264   \n",
       "\n",
       "  call.1    3 call.2    4 call.3  ...   29 call.33   30 call.34   31 call.35  \\\n",
       "0      A  -76      A -135      A  ...   15       A -318       A  -32       A   \n",
       "1      A  -49      A -114      A  ... -114       A -192       A  -49       A   \n",
       "2      A -307      A  265      A  ...    2       A  -95       A   49       A   \n",
       "3      A  309      A   12      A  ...  193       A  312       A  230       P   \n",
       "4      A -376      A -419      A  ...  -51       A -139       A -367       A   \n",
       "\n",
       "    32 call.36   33 call.37  \n",
       "0 -124       A -135       A  \n",
       "1  -79       A -186       A  \n",
       "2  -37       A  -70       A  \n",
       "3  330       A  337       A  \n",
       "4 -188       A -407       A  \n",
       "\n",
       "[5 rows x 78 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_Data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.05406,
     "end_time": "2024-04-18T21:44:50.649696",
     "exception": false,
     "start_time": "2024-04-18T21:44:50.595636",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Check for nulls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:50.794139Z",
     "iopub.status.busy": "2024-04-18T21:44:50.793467Z",
     "iopub.status.idle": "2024-04-18T21:44:50.827303Z",
     "shell.execute_reply": "2024-04-18T21:44:50.826694Z",
     "shell.execute_reply.started": "2024-04-18T21:33:58.512650Z"
    },
    "papermill": {
     "duration": 0.122417,
     "end_time": "2024-04-18T21:44:50.827407",
     "exception": false,
     "start_time": "2024-04-18T21:44:50.704990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "#check for nulls\n",
    "print(Train_Data.isna().sum().max())\n",
    "print(Test_Data.isna().sum().max())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.05206,
     "end_time": "2024-04-18T21:44:50.931084",
     "exception": false,
     "start_time": "2024-04-18T21:44:50.879024",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Drop 'call'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:51.046090Z",
     "iopub.status.busy": "2024-04-18T21:44:51.045371Z",
     "iopub.status.idle": "2024-04-18T21:44:51.048705Z",
     "shell.execute_reply": "2024-04-18T21:44:51.048003Z",
     "shell.execute_reply.started": "2024-04-18T21:33:58.594139Z"
    },
    "papermill": {
     "duration": 0.066211,
     "end_time": "2024-04-18T21:44:51.048820",
     "exception": false,
     "start_time": "2024-04-18T21:44:50.982609",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#drop 'call' columns\n",
    "cols = [col for col in Test_Data.columns if 'call' in col]\n",
    "test = Test_Data.drop(cols, 1)\n",
    "cols = [col for col in Train_Data.columns if 'call' in col]\n",
    "train = Train_Data.drop(cols, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:51.157796Z",
     "iopub.status.busy": "2024-04-18T21:44:51.157183Z",
     "iopub.status.idle": "2024-04-18T21:44:51.171586Z",
     "shell.execute_reply": "2024-04-18T21:44:51.172125Z",
     "shell.execute_reply.started": "2024-04-18T21:33:58.608693Z"
    },
    "papermill": {
     "duration": 0.069667,
     "end_time": "2024-04-18T21:44:51.172271",
     "exception": false,
     "start_time": "2024-04-18T21:44:51.102604",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Join all the data\n",
    "patients = [str(i) for i in range(1, 73, 1)]\n",
    "df_all = pd.concat([train, test], axis = 1)[patients]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.050525,
     "end_time": "2024-04-18T21:44:51.273632",
     "exception": false,
     "start_time": "2024-04-18T21:44:51.223107",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Transpose rows and columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:51.376514Z",
     "iopub.status.busy": "2024-04-18T21:44:51.375858Z",
     "iopub.status.idle": "2024-04-18T21:44:51.378696Z",
     "shell.execute_reply": "2024-04-18T21:44:51.378095Z",
     "shell.execute_reply.started": "2024-04-18T21:33:58.644418Z"
    },
    "papermill": {
     "duration": 0.055905,
     "end_time": "2024-04-18T21:44:51.378793",
     "exception": false,
     "start_time": "2024-04-18T21:44:51.322888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#transpose rows and columns\n",
    "df_all = df_all.T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.049244,
     "end_time": "2024-04-18T21:44:51.477270",
     "exception": false,
     "start_time": "2024-04-18T21:44:51.428026",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Encode the categorical columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:51.583264Z",
     "iopub.status.busy": "2024-04-18T21:44:51.582337Z",
     "iopub.status.idle": "2024-04-18T21:44:51.603230Z",
     "shell.execute_reply": "2024-04-18T21:44:51.602536Z",
     "shell.execute_reply.started": "2024-04-18T21:33:58.654596Z"
    },
    "papermill": {
     "duration": 0.07697,
     "end_time": "2024-04-18T21:44:51.603334",
     "exception": false,
     "start_time": "2024-04-18T21:44:51.526364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_all[\"patient\"] = pd.to_numeric(patients)\n",
    "labels[\"cancer\"]= pd.get_dummies(labels.cancer, drop_first=True)\n",
    "# add the cancer column to train data\n",
    "\n",
    "Data = pd.merge(df_all, labels, on=\"patient\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:51.719981Z",
     "iopub.status.busy": "2024-04-18T21:44:51.719048Z",
     "iopub.status.idle": "2024-04-18T21:44:51.723466Z",
     "shell.execute_reply": "2024-04-18T21:44:51.722937Z",
     "shell.execute_reply.started": "2024-04-18T21:33:58.694618Z"
    },
    "papermill": {
     "duration": 0.070704,
     "end_time": "2024-04-18T21:44:51.723562",
     "exception": false,
     "start_time": "2024-04-18T21:44:51.652858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>7121</th>\n",
       "      <th>7122</th>\n",
       "      <th>7123</th>\n",
       "      <th>7124</th>\n",
       "      <th>7125</th>\n",
       "      <th>7126</th>\n",
       "      <th>7127</th>\n",
       "      <th>7128</th>\n",
       "      <th>patient</th>\n",
       "      <th>cancer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-214</td>\n",
       "      <td>-153</td>\n",
       "      <td>-58</td>\n",
       "      <td>88</td>\n",
       "      <td>-295</td>\n",
       "      <td>-558</td>\n",
       "      <td>199</td>\n",
       "      <td>-176</td>\n",
       "      <td>252</td>\n",
       "      <td>206</td>\n",
       "      <td>...</td>\n",
       "      <td>-125</td>\n",
       "      <td>389</td>\n",
       "      <td>-37</td>\n",
       "      <td>793</td>\n",
       "      <td>329</td>\n",
       "      <td>36</td>\n",
       "      <td>191</td>\n",
       "      <td>-37</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-139</td>\n",
       "      <td>-73</td>\n",
       "      <td>-1</td>\n",
       "      <td>283</td>\n",
       "      <td>-264</td>\n",
       "      <td>-400</td>\n",
       "      <td>-330</td>\n",
       "      <td>-168</td>\n",
       "      <td>101</td>\n",
       "      <td>74</td>\n",
       "      <td>...</td>\n",
       "      <td>-36</td>\n",
       "      <td>442</td>\n",
       "      <td>-17</td>\n",
       "      <td>782</td>\n",
       "      <td>295</td>\n",
       "      <td>11</td>\n",
       "      <td>76</td>\n",
       "      <td>-14</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-76</td>\n",
       "      <td>-49</td>\n",
       "      <td>-307</td>\n",
       "      <td>309</td>\n",
       "      <td>-376</td>\n",
       "      <td>-650</td>\n",
       "      <td>33</td>\n",
       "      <td>-367</td>\n",
       "      <td>206</td>\n",
       "      <td>-215</td>\n",
       "      <td>...</td>\n",
       "      <td>33</td>\n",
       "      <td>168</td>\n",
       "      <td>52</td>\n",
       "      <td>1138</td>\n",
       "      <td>777</td>\n",
       "      <td>41</td>\n",
       "      <td>228</td>\n",
       "      <td>-41</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-135</td>\n",
       "      <td>-114</td>\n",
       "      <td>265</td>\n",
       "      <td>12</td>\n",
       "      <td>-419</td>\n",
       "      <td>-585</td>\n",
       "      <td>158</td>\n",
       "      <td>-253</td>\n",
       "      <td>49</td>\n",
       "      <td>31</td>\n",
       "      <td>...</td>\n",
       "      <td>218</td>\n",
       "      <td>174</td>\n",
       "      <td>-110</td>\n",
       "      <td>627</td>\n",
       "      <td>170</td>\n",
       "      <td>-50</td>\n",
       "      <td>126</td>\n",
       "      <td>-91</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-106</td>\n",
       "      <td>-125</td>\n",
       "      <td>-76</td>\n",
       "      <td>168</td>\n",
       "      <td>-230</td>\n",
       "      <td>-284</td>\n",
       "      <td>4</td>\n",
       "      <td>-122</td>\n",
       "      <td>70</td>\n",
       "      <td>252</td>\n",
       "      <td>...</td>\n",
       "      <td>57</td>\n",
       "      <td>504</td>\n",
       "      <td>-26</td>\n",
       "      <td>250</td>\n",
       "      <td>314</td>\n",
       "      <td>14</td>\n",
       "      <td>56</td>\n",
       "      <td>-25</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 7131 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     0    1    2    3    4    5    6    7    8    9  ...  7121  7122  7123  \\\n",
       "0 -214 -153  -58   88 -295 -558  199 -176  252  206  ...  -125   389   -37   \n",
       "1 -139  -73   -1  283 -264 -400 -330 -168  101   74  ...   -36   442   -17   \n",
       "2  -76  -49 -307  309 -376 -650   33 -367  206 -215  ...    33   168    52   \n",
       "3 -135 -114  265   12 -419 -585  158 -253   49   31  ...   218   174  -110   \n",
       "4 -106 -125  -76  168 -230 -284    4 -122   70  252  ...    57   504   -26   \n",
       "\n",
       "   7124  7125  7126  7127  7128  patient  cancer  \n",
       "0   793   329    36   191   -37        1       0  \n",
       "1   782   295    11    76   -14        2       0  \n",
       "2  1138   777    41   228   -41        3       0  \n",
       "3   627   170   -50   126   -91        4       0  \n",
       "4   250   314    14    56   -25        5       0  \n",
       "\n",
       "[5 rows x 7131 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:51.833821Z",
     "iopub.status.busy": "2024-04-18T21:44:51.832898Z",
     "iopub.status.idle": "2024-04-18T21:44:51.836643Z",
     "shell.execute_reply": "2024-04-18T21:44:51.836033Z",
     "shell.execute_reply.started": "2024-04-18T21:33:58.729097Z"
    },
    "papermill": {
     "duration": 0.06399,
     "end_time": "2024-04-18T21:44:51.836739",
     "exception": false,
     "start_time": "2024-04-18T21:44:51.772749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    47\n",
       "1    25\n",
       "Name: cancer, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data['cancer'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:51.942509Z",
     "iopub.status.busy": "2024-04-18T21:44:51.941827Z",
     "iopub.status.idle": "2024-04-18T21:44:52.097616Z",
     "shell.execute_reply": "2024-04-18T21:44:52.096963Z",
     "shell.execute_reply.started": "2024-04-18T21:33:58.745171Z"
    },
    "papermill": {
     "duration": 0.210871,
     "end_time": "2024-04-18T21:44:52.097722",
     "exception": false,
     "start_time": "2024-04-18T21:44:51.886851",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Class Distributions \\n (0: AML || 1: ALL)')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(4,8))\n",
    "colors = [\"AML\", \"ALL\"]\n",
    "sns.countplot(x='cancer', data=Data, palette = \"Set1\")\n",
    "plt.title('Class Distributions \\n (0: AML || 1: ALL)', fontsize=14)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.050803,
     "end_time": "2024-04-18T21:44:52.200208",
     "exception": false,
     "start_time": "2024-04-18T21:44:52.149405",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can clearly see that the labels are not balanced and we need to balance them before building our classification models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:52.309262Z",
     "iopub.status.busy": "2024-04-18T21:44:52.308535Z",
     "iopub.status.idle": "2024-04-18T21:44:52.319668Z",
     "shell.execute_reply": "2024-04-18T21:44:52.319035Z",
     "shell.execute_reply.started": "2024-04-18T21:33:58.937475Z"
    },
    "papermill": {
     "duration": 0.067762,
     "end_time": "2024-04-18T21:44:52.319768",
     "exception": false,
     "start_time": "2024-04-18T21:44:52.252006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#X -> matrix of independent variable\n",
    "#y -> vector of dependent variable\n",
    "X, y = Data.drop(columns=[\"cancer\"]), Data[\"cancer\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:52.440914Z",
     "iopub.status.busy": "2024-04-18T21:44:52.427813Z",
     "iopub.status.idle": "2024-04-18T21:44:52.447401Z",
     "shell.execute_reply": "2024-04-18T21:44:52.447860Z",
     "shell.execute_reply.started": "2024-04-18T21:33:58.957976Z"
    },
    "papermill": {
     "duration": 0.077572,
     "end_time": "2024-04-18T21:44:52.447983",
     "exception": false,
     "start_time": "2024-04-18T21:44:52.370411",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>7120</th>\n",
       "      <th>7121</th>\n",
       "      <th>7122</th>\n",
       "      <th>7123</th>\n",
       "      <th>7124</th>\n",
       "      <th>7125</th>\n",
       "      <th>7126</th>\n",
       "      <th>7127</th>\n",
       "      <th>7128</th>\n",
       "      <th>patient</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-214</td>\n",
       "      <td>-153</td>\n",
       "      <td>-58</td>\n",
       "      <td>88</td>\n",
       "      <td>-295</td>\n",
       "      <td>-558</td>\n",
       "      <td>199</td>\n",
       "      <td>-176</td>\n",
       "      <td>252</td>\n",
       "      <td>206</td>\n",
       "      <td>...</td>\n",
       "      <td>511</td>\n",
       "      <td>-125</td>\n",
       "      <td>389</td>\n",
       "      <td>-37</td>\n",
       "      <td>793</td>\n",
       "      <td>329</td>\n",
       "      <td>36</td>\n",
       "      <td>191</td>\n",
       "      <td>-37</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-139</td>\n",
       "      <td>-73</td>\n",
       "      <td>-1</td>\n",
       "      <td>283</td>\n",
       "      <td>-264</td>\n",
       "      <td>-400</td>\n",
       "      <td>-330</td>\n",
       "      <td>-168</td>\n",
       "      <td>101</td>\n",
       "      <td>74</td>\n",
       "      <td>...</td>\n",
       "      <td>837</td>\n",
       "      <td>-36</td>\n",
       "      <td>442</td>\n",
       "      <td>-17</td>\n",
       "      <td>782</td>\n",
       "      <td>295</td>\n",
       "      <td>11</td>\n",
       "      <td>76</td>\n",
       "      <td>-14</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-76</td>\n",
       "      <td>-49</td>\n",
       "      <td>-307</td>\n",
       "      <td>309</td>\n",
       "      <td>-376</td>\n",
       "      <td>-650</td>\n",
       "      <td>33</td>\n",
       "      <td>-367</td>\n",
       "      <td>206</td>\n",
       "      <td>-215</td>\n",
       "      <td>...</td>\n",
       "      <td>1199</td>\n",
       "      <td>33</td>\n",
       "      <td>168</td>\n",
       "      <td>52</td>\n",
       "      <td>1138</td>\n",
       "      <td>777</td>\n",
       "      <td>41</td>\n",
       "      <td>228</td>\n",
       "      <td>-41</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-135</td>\n",
       "      <td>-114</td>\n",
       "      <td>265</td>\n",
       "      <td>12</td>\n",
       "      <td>-419</td>\n",
       "      <td>-585</td>\n",
       "      <td>158</td>\n",
       "      <td>-253</td>\n",
       "      <td>49</td>\n",
       "      <td>31</td>\n",
       "      <td>...</td>\n",
       "      <td>835</td>\n",
       "      <td>218</td>\n",
       "      <td>174</td>\n",
       "      <td>-110</td>\n",
       "      <td>627</td>\n",
       "      <td>170</td>\n",
       "      <td>-50</td>\n",
       "      <td>126</td>\n",
       "      <td>-91</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-106</td>\n",
       "      <td>-125</td>\n",
       "      <td>-76</td>\n",
       "      <td>168</td>\n",
       "      <td>-230</td>\n",
       "      <td>-284</td>\n",
       "      <td>4</td>\n",
       "      <td>-122</td>\n",
       "      <td>70</td>\n",
       "      <td>252</td>\n",
       "      <td>...</td>\n",
       "      <td>649</td>\n",
       "      <td>57</td>\n",
       "      <td>504</td>\n",
       "      <td>-26</td>\n",
       "      <td>250</td>\n",
       "      <td>314</td>\n",
       "      <td>14</td>\n",
       "      <td>56</td>\n",
       "      <td>-25</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>-154</td>\n",
       "      <td>-136</td>\n",
       "      <td>49</td>\n",
       "      <td>180</td>\n",
       "      <td>-257</td>\n",
       "      <td>-273</td>\n",
       "      <td>141</td>\n",
       "      <td>-123</td>\n",
       "      <td>52</td>\n",
       "      <td>878</td>\n",
       "      <td>...</td>\n",
       "      <td>540</td>\n",
       "      <td>13</td>\n",
       "      <td>1075</td>\n",
       "      <td>-45</td>\n",
       "      <td>524</td>\n",
       "      <td>249</td>\n",
       "      <td>40</td>\n",
       "      <td>-68</td>\n",
       "      <td>-1</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>-79</td>\n",
       "      <td>-118</td>\n",
       "      <td>-30</td>\n",
       "      <td>68</td>\n",
       "      <td>-110</td>\n",
       "      <td>-264</td>\n",
       "      <td>-28</td>\n",
       "      <td>-61</td>\n",
       "      <td>40</td>\n",
       "      <td>-217</td>\n",
       "      <td>...</td>\n",
       "      <td>617</td>\n",
       "      <td>-34</td>\n",
       "      <td>738</td>\n",
       "      <td>11</td>\n",
       "      <td>742</td>\n",
       "      <td>234</td>\n",
       "      <td>72</td>\n",
       "      <td>109</td>\n",
       "      <td>-30</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>-55</td>\n",
       "      <td>-44</td>\n",
       "      <td>12</td>\n",
       "      <td>129</td>\n",
       "      <td>-108</td>\n",
       "      <td>-301</td>\n",
       "      <td>-222</td>\n",
       "      <td>-133</td>\n",
       "      <td>136</td>\n",
       "      <td>320</td>\n",
       "      <td>...</td>\n",
       "      <td>318</td>\n",
       "      <td>35</td>\n",
       "      <td>241</td>\n",
       "      <td>-66</td>\n",
       "      <td>320</td>\n",
       "      <td>174</td>\n",
       "      <td>-4</td>\n",
       "      <td>176</td>\n",
       "      <td>40</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>-59</td>\n",
       "      <td>-114</td>\n",
       "      <td>23</td>\n",
       "      <td>146</td>\n",
       "      <td>-171</td>\n",
       "      <td>-227</td>\n",
       "      <td>-73</td>\n",
       "      <td>-126</td>\n",
       "      <td>-6</td>\n",
       "      <td>149</td>\n",
       "      <td>...</td>\n",
       "      <td>760</td>\n",
       "      <td>-38</td>\n",
       "      <td>201</td>\n",
       "      <td>-55</td>\n",
       "      <td>348</td>\n",
       "      <td>208</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>-12</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>-131</td>\n",
       "      <td>-126</td>\n",
       "      <td>-50</td>\n",
       "      <td>211</td>\n",
       "      <td>-206</td>\n",
       "      <td>-287</td>\n",
       "      <td>-34</td>\n",
       "      <td>-114</td>\n",
       "      <td>62</td>\n",
       "      <td>341</td>\n",
       "      <td>...</td>\n",
       "      <td>697</td>\n",
       "      <td>3</td>\n",
       "      <td>1046</td>\n",
       "      <td>27</td>\n",
       "      <td>874</td>\n",
       "      <td>393</td>\n",
       "      <td>34</td>\n",
       "      <td>237</td>\n",
       "      <td>-2</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>72 rows × 7130 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      0    1    2    3    4    5    6    7    8    9  ...  7120  7121  7122  \\\n",
       "0  -214 -153  -58   88 -295 -558  199 -176  252  206  ...   511  -125   389   \n",
       "1  -139  -73   -1  283 -264 -400 -330 -168  101   74  ...   837   -36   442   \n",
       "2   -76  -49 -307  309 -376 -650   33 -367  206 -215  ...  1199    33   168   \n",
       "3  -135 -114  265   12 -419 -585  158 -253   49   31  ...   835   218   174   \n",
       "4  -106 -125  -76  168 -230 -284    4 -122   70  252  ...   649    57   504   \n",
       "..  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   ...   ...   ...   \n",
       "67 -154 -136   49  180 -257 -273  141 -123   52  878  ...   540    13  1075   \n",
       "68  -79 -118  -30   68 -110 -264  -28  -61   40 -217  ...   617   -34   738   \n",
       "69  -55  -44   12  129 -108 -301 -222 -133  136  320  ...   318    35   241   \n",
       "70  -59 -114   23  146 -171 -227  -73 -126   -6  149  ...   760   -38   201   \n",
       "71 -131 -126  -50  211 -206 -287  -34 -114   62  341  ...   697     3  1046   \n",
       "\n",
       "    7123  7124  7125  7126  7127  7128  patient  \n",
       "0    -37   793   329    36   191   -37        1  \n",
       "1    -17   782   295    11    76   -14        2  \n",
       "2     52  1138   777    41   228   -41        3  \n",
       "3   -110   627   170   -50   126   -91        4  \n",
       "4    -26   250   314    14    56   -25        5  \n",
       "..   ...   ...   ...   ...   ...   ...      ...  \n",
       "67   -45   524   249    40   -68    -1       68  \n",
       "68    11   742   234    72   109   -30       69  \n",
       "69   -66   320   174    -4   176    40       70  \n",
       "70   -55   348   208     0    74   -12       71  \n",
       "71    27   874   393    34   237    -2       72  \n",
       "\n",
       "[72 rows x 7130 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:52.559474Z",
     "iopub.status.busy": "2024-04-18T21:44:52.558604Z",
     "iopub.status.idle": "2024-04-18T21:44:52.562389Z",
     "shell.execute_reply": "2024-04-18T21:44:52.561656Z",
     "shell.execute_reply.started": "2024-04-18T21:33:58.993459Z"
    },
    "papermill": {
     "duration": 0.062537,
     "end_time": "2024-04-18T21:44:52.562494",
     "exception": false,
     "start_time": "2024-04-18T21:44:52.499957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     0\n",
       "1     0\n",
       "2     0\n",
       "3     0\n",
       "4     0\n",
       "     ..\n",
       "67    0\n",
       "68    0\n",
       "69    0\n",
       "70    0\n",
       "71    0\n",
       "Name: cancer, Length: 72, dtype: uint8"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.051638,
     "end_time": "2024-04-18T21:44:52.666519",
     "exception": false,
     "start_time": "2024-04-18T21:44:52.614881",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Split the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:52.781621Z",
     "iopub.status.busy": "2024-04-18T21:44:52.780988Z",
     "iopub.status.idle": "2024-04-18T21:44:52.783936Z",
     "shell.execute_reply": "2024-04-18T21:44:52.783454Z",
     "shell.execute_reply.started": "2024-04-18T21:33:59.005349Z"
    },
    "papermill": {
     "duration": 0.064381,
     "end_time": "2024-04-18T21:44:52.784034",
     "exception": false,
     "start_time": "2024-04-18T21:44:52.719653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#split the dataset\n",
    "X_train, X_test, y_train, y_test =  train_test_split(X,y,test_size = 0.25, random_state= 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.051984,
     "end_time": "2024-04-18T21:44:52.888514",
     "exception": false,
     "start_time": "2024-04-18T21:44:52.836530",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Before feature scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:52.997189Z",
     "iopub.status.busy": "2024-04-18T21:44:52.996584Z",
     "iopub.status.idle": "2024-04-18T21:44:52.999310Z",
     "shell.execute_reply": "2024-04-18T21:44:52.998801Z",
     "shell.execute_reply.started": "2024-04-18T21:33:59.023524Z"
    },
    "papermill": {
     "duration": 0.058331,
     "end_time": "2024-04-18T21:44:52.999415",
     "exception": false,
     "start_time": "2024-04-18T21:44:52.941084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#before feature scaling\n",
    "#X_train = pd.DataFrame(X_train)\n",
    "#X_train.plot(kind=\"kde\", legend=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.053623,
     "end_time": "2024-04-18T21:44:53.105898",
     "exception": false,
     "start_time": "2024-04-18T21:44:53.052275",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Feature scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:53.243482Z",
     "iopub.status.busy": "2024-04-18T21:44:53.226491Z",
     "iopub.status.idle": "2024-04-18T21:44:53.389149Z",
     "shell.execute_reply": "2024-04-18T21:44:53.388630Z",
     "shell.execute_reply.started": "2024-04-18T21:33:59.035234Z"
    },
    "papermill": {
     "duration": 0.230997,
     "end_time": "2024-04-18T21:44:53.389262",
     "exception": false,
     "start_time": "2024-04-18T21:44:53.158265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#feature scaling\n",
    "sc_X = StandardScaler()\n",
    "X_train = sc_X.fit_transform(X_train)\n",
    "X_test = sc_X.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:53.498055Z",
     "iopub.status.busy": "2024-04-18T21:44:53.497393Z",
     "iopub.status.idle": "2024-04-18T21:44:53.500860Z",
     "shell.execute_reply": "2024-04-18T21:44:53.500373Z",
     "shell.execute_reply.started": "2024-04-18T21:33:59.292380Z"
    },
    "papermill": {
     "duration": 0.059382,
     "end_time": "2024-04-18T21:44:53.500954",
     "exception": false,
     "start_time": "2024-04-18T21:44:53.441572",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(54, 7130)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.052838,
     "end_time": "2024-04-18T21:44:53.607659",
     "exception": false,
     "start_time": "2024-04-18T21:44:53.554821",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### After feature scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:53.719100Z",
     "iopub.status.busy": "2024-04-18T21:44:53.718187Z",
     "iopub.status.idle": "2024-04-18T21:44:53.721322Z",
     "shell.execute_reply": "2024-04-18T21:44:53.720643Z",
     "shell.execute_reply.started": "2024-04-18T21:33:59.302219Z"
    },
    "papermill": {
     "duration": 0.060401,
     "end_time": "2024-04-18T21:44:53.721434",
     "exception": false,
     "start_time": "2024-04-18T21:44:53.661033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#after feature scaling\n",
    "#X_train = pd.DataFrame(X_train)\n",
    "#X_train.plot(kind=\"kde\", legend=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.052628,
     "end_time": "2024-04-18T21:44:53.827171",
     "exception": false,
     "start_time": "2024-04-18T21:44:53.774543",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Dimentionality reduction using Principal Component Analysis(PCA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:53.956141Z",
     "iopub.status.busy": "2024-04-18T21:44:53.955232Z",
     "iopub.status.idle": "2024-04-18T21:44:54.366483Z",
     "shell.execute_reply": "2024-04-18T21:44:54.365756Z",
     "shell.execute_reply.started": "2024-04-18T21:33:59.318196Z"
    },
    "papermill": {
     "duration": 0.48741,
     "end_time": "2024-04-18T21:44:54.366626",
     "exception": false,
     "start_time": "2024-04-18T21:44:53.879216",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38 features explain around 90% of the variance. From 7129 features to 38, not too bad.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 38 artists>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pca = PCA()\n",
    "pca.fit_transform(X_train)\n",
    "\n",
    "total = sum(pca.explained_variance_)\n",
    "k = 0\n",
    "current_variance = 0\n",
    "while current_variance/total < 0.90:\n",
    "    current_variance += pca.explained_variance_[k]\n",
    "    k = k + 1\n",
    "    \n",
    "print(k, \" features explain around 90% of the variance. From 7129 features to \", k, \", not too bad.\", sep='')\n",
    "\n",
    "pca = PCA(n_components=k)\n",
    "X_train_pca = pca.fit(X_train)\n",
    "X_train_pca = pca.transform(X_train)\n",
    "X_test_pca = pca.transform(X_test)\n",
    "\n",
    "var_exp = pca.explained_variance_ratio_.cumsum()\n",
    "var_exp = var_exp*100\n",
    "plt.bar(range(k), var_exp,color = 'r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:54.500231Z",
     "iopub.status.busy": "2024-04-18T21:44:54.499214Z",
     "iopub.status.idle": "2024-04-18T21:44:54.503772Z",
     "shell.execute_reply": "2024-04-18T21:44:54.502998Z",
     "shell.execute_reply.started": "2024-04-18T21:33:59.739740Z"
    },
    "papermill": {
     "duration": 0.068813,
     "end_time": "2024-04-18T21:44:54.503904",
     "exception": false,
     "start_time": "2024-04-18T21:44:54.435091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "38"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca.n_components_ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.055025,
     "end_time": "2024-04-18T21:44:54.619037",
     "exception": false,
     "start_time": "2024-04-18T21:44:54.564012",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Balacing the lables using SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:54.740067Z",
     "iopub.status.busy": "2024-04-18T21:44:54.739468Z",
     "iopub.status.idle": "2024-04-18T21:44:54.852202Z",
     "shell.execute_reply": "2024-04-18T21:44:54.851520Z",
     "shell.execute_reply.started": "2024-04-18T21:33:59.748780Z"
    },
    "papermill": {
     "duration": 0.176556,
     "end_time": "2024-04-18T21:44:54.852319",
     "exception": false,
     "start_time": "2024-04-18T21:44:54.675763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before Upsampling:-\n",
      "Counter({0: 39, 1: 15})\n",
      "After Upsampling:-\n",
      "Counter({0: 39, 1: 39})\n"
     ]
    }
   ],
   "source": [
    "from sklearn.utils import resample\n",
    "from collections import Counter\n",
    "\n",
    "print(\"Before Upsampling:-\")\n",
    "print(Counter(y_train))\n",
    "\n",
    "\n",
    "# Let's use SMOTE to oversample\n",
    "from imblearn.over_sampling import SMOTE\n",
    "oversample = SMOTE()\n",
    "X_train_ov, y_train_ov = oversample.fit_resample(X_train_pca,y_train)\n",
    "\n",
    "print(\"After Upsampling:-\")\n",
    "print(Counter(y_train_ov))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.056291,
     "end_time": "2024-04-18T21:44:54.965004",
     "exception": false,
     "start_time": "2024-04-18T21:44:54.908713",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Hyperprameter optimization for SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:55.087823Z",
     "iopub.status.busy": "2024-04-18T21:44:55.087179Z",
     "iopub.status.idle": "2024-04-18T21:44:57.520727Z",
     "shell.execute_reply": "2024-04-18T21:44:57.521709Z",
     "shell.execute_reply.started": "2024-04-18T21:33:59.901874Z"
    },
    "papermill": {
     "duration": 2.501836,
     "end_time": "2024-04-18T21:44:57.521863",
     "exception": false,
     "start_time": "2024-04-18T21:44:55.020027",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 40 candidates, totalling 200 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  68 tasks      | elapsed:    2.1s\n",
      "[Parallel(n_jobs=-1)]: Done 200 out of 200 | elapsed:    2.4s finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "SVC(C=1, kernel='linear')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# do a grid search\n",
    "svc_params = [{'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n",
    "              {'C': [1, 10, 100, 1000], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]\n",
    "\n",
    "search = GridSearchCV(SVC(), svc_params, n_jobs=-1, verbose=1)\n",
    "search.fit(X_train_ov, y_train_ov)\n",
    "\n",
    "best_accuracy = search.best_score_ #to get best score\n",
    "best_parameters = search.best_params_ #to get best parameters\n",
    "# select best svc\n",
    "best_svc = search.best_estimator_\n",
    "best_svc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:57.656051Z",
     "iopub.status.busy": "2024-04-18T21:44:57.655146Z",
     "iopub.status.idle": "2024-04-18T21:44:58.033474Z",
     "shell.execute_reply": "2024-04-18T21:44:58.032737Z",
     "shell.execute_reply.started": "2024-04-18T21:34:02.883910Z"
    },
    "papermill": {
     "duration": 0.450245,
     "end_time": "2024-04-18T21:44:58.033601",
     "exception": false,
     "start_time": "2024-04-18T21:44:57.583356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy of SVM is 0.7222222222222222\n",
      "\n",
      "Classification report :\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.62      1.00      0.76         8\n",
      "           1       1.00      0.50      0.67        10\n",
      "\n",
      "    accuracy                           0.72        18\n",
      "   macro avg       0.81      0.75      0.71        18\n",
      "weighted avg       0.83      0.72      0.71        18\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'ROC - CURVE & AREA UNDER CURVE')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x720 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#build SVM model with best parameters\n",
    "svc_model = SVC(C=1, kernel='linear',probability=True)\n",
    "\n",
    "svc_model.fit(X_train_ov, y_train_ov)\n",
    "\n",
    "prediction=svc_model.predict(X_test_pca)\n",
    "\n",
    "acc_svc = accuracy_score(prediction,y_test)\n",
    "print('The accuracy of SVM is', acc_svc)\n",
    "print (\"\\nClassification report :\\n\",(classification_report(y_test,prediction)))\n",
    "\n",
    "#Confusion matrix\n",
    "plt.figure(figsize=(13,10))\n",
    "plt.subplot(221)\n",
    "sns.heatmap(confusion_matrix(y_test,prediction),annot=True, cmap='Greens', fmt = \"d\",linecolor=\"k\",linewidths=3)\n",
    "plt.title(\"CONFUSION MATRIX\",fontsize=20)\n",
    "\n",
    "#ROC curve and Area under the curve plotting\n",
    "predicting_probabilites = svc_model.predict_proba(X_test_pca)[:,1]\n",
    "fpr,tpr,thresholds = roc_curve(y_test,predicting_probabilites)\n",
    "plt.subplot(222)\n",
    "plt.plot(fpr,tpr,label = (\"Area_under the curve :\",auc(fpr,tpr)),color = \"r\")\n",
    "plt.plot([1,0],[1,0],linestyle = \"dashed\",color =\"k\")\n",
    "plt.legend(loc = \"best\")\n",
    "plt.title(\"ROC - CURVE & AREA UNDER CURVE\",fontsize=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.060759,
     "end_time": "2024-04-18T21:44:58.164538",
     "exception": false,
     "start_time": "2024-04-18T21:44:58.103779",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Hyperprameter optimization for KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:58.293321Z",
     "iopub.status.busy": "2024-04-18T21:44:58.292636Z",
     "iopub.status.idle": "2024-04-18T21:44:59.524746Z",
     "shell.execute_reply": "2024-04-18T21:44:59.525247Z",
     "shell.execute_reply.started": "2024-04-18T21:34:03.330329Z"
    },
    "papermill": {
     "duration": 1.301594,
     "end_time": "2024-04-18T21:44:59.525384",
     "exception": false,
     "start_time": "2024-04-18T21:44:58.223790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 216 candidates, totalling 1080 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done 312 tasks      | elapsed:    0.5s\n",
      "[Parallel(n_jobs=-1)]: Done 1080 out of 1080 | elapsed:    1.2s finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='ball_tree', leaf_size=1, n_neighbors=1, p=1)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_param = {\n",
    "    \"n_neighbors\": [i for i in range(1,30,5)],\n",
    "    \"weights\": [\"uniform\", \"distance\"],\n",
    "    \"algorithm\": [\"ball_tree\", \"kd_tree\", \"brute\"],\n",
    "    \"leaf_size\": [1, 10, 30],\n",
    "    \"p\": [1,2]\n",
    "}\n",
    "search = GridSearchCV(KNeighborsClassifier(), knn_param, n_jobs=-1, verbose=1)\n",
    "search.fit(X_train_ov, y_train_ov)\n",
    "\n",
    "best_accuracy = search.best_score_ #to get best score\n",
    "best_parameters = search.best_params_ #to get best parameters\n",
    "# select best svc\n",
    "best_knn = search.best_estimator_\n",
    "best_knn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:44:59.660009Z",
     "iopub.status.busy": "2024-04-18T21:44:59.659134Z",
     "iopub.status.idle": "2024-04-18T21:44:59.984596Z",
     "shell.execute_reply": "2024-04-18T21:44:59.984041Z",
     "shell.execute_reply.started": "2024-04-18T21:34:05.008629Z"
    },
    "papermill": {
     "duration": 0.397984,
     "end_time": "2024-04-18T21:44:59.984703",
     "exception": false,
     "start_time": "2024-04-18T21:44:59.586719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy of K-NN is 0.7777777777777778\n",
      "\n",
      "Classification report :\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.75      0.75      0.75         8\n",
      "           1       0.80      0.80      0.80        10\n",
      "\n",
      "    accuracy                           0.78        18\n",
      "   macro avg       0.78      0.78      0.78        18\n",
      "weighted avg       0.78      0.78      0.78        18\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'ROC - CURVE & AREA UNDER CURVE')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x720 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "knn_model = KNeighborsClassifier(algorithm='ball_tree', leaf_size=1, n_neighbors=1,\n",
    "                     weights='distance')\n",
    "\n",
    "knn_model.fit(X_train_ov,y_train_ov)\n",
    "prediction=knn_model.predict(X_test_pca)\n",
    "\n",
    "acc_knn = accuracy_score(prediction,y_test)\n",
    "print('The accuracy of K-NN is', acc_knn)\n",
    "print (\"\\nClassification report :\\n\",(classification_report(y_test,prediction)))\n",
    "\n",
    "#Confusion matrix\n",
    "plt.figure(figsize=(13,10))\n",
    "plt.subplot(221)\n",
    "sns.heatmap(confusion_matrix(y_test,prediction),annot=True, cmap='Greens', fmt = \"d\",linecolor=\"k\",linewidths=3)\n",
    "plt.title(\"CONFUSION MATRIX\",fontsize=20)\n",
    "\n",
    "#ROC curve and Area under the curve plotting\n",
    "predicting_probabilites = knn_model.predict_proba(X_test_pca)[:,1]\n",
    "fpr,tpr,thresholds = roc_curve(y_test,predicting_probabilites)\n",
    "plt.subplot(222)\n",
    "plt.plot(fpr,tpr,label = (\"Area_under the curve :\",auc(fpr,tpr)),color = \"r\")\n",
    "plt.plot([1,0],[1,0],linestyle = \"dashed\",color =\"k\")\n",
    "plt.legend(loc = \"best\")\n",
    "plt.title(\"ROC - CURVE & AREA UNDER CURVE\",fontsize=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.063555,
     "end_time": "2024-04-18T21:45:00.110792",
     "exception": false,
     "start_time": "2024-04-18T21:45:00.047237",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Hyperprameter optimization for Logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:45:00.245276Z",
     "iopub.status.busy": "2024-04-18T21:45:00.244570Z",
     "iopub.status.idle": "2024-04-18T21:45:00.317113Z",
     "shell.execute_reply": "2024-04-18T21:45:00.316573Z",
     "shell.execute_reply.started": "2024-04-18T21:34:05.432965Z"
    },
    "papermill": {
     "duration": 0.144794,
     "end_time": "2024-04-18T21:45:00.317216",
     "exception": false,
     "start_time": "2024-04-18T21:45:00.172422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=0.001, solver='liblinear')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_grid = {'C': [1e-03, 1e-2, 1e-1, 1, 10], \n",
    "                 'penalty': ['l1', 'l2']}\n",
    "\n",
    "log_model = GridSearchCV(estimator=LogisticRegression(solver='liblinear'), \n",
    "                  param_grid=log_grid, \n",
    "                  cv=3,\n",
    "                  scoring='accuracy')\n",
    "log_model.fit(X_train_ov, y_train_ov)\n",
    "\n",
    "\n",
    "best_accuracy = log_model.best_score_ #to get best score\n",
    "best_parameters = log_model.best_params_ #to get best parameters\n",
    "# select best svc\n",
    "best_lr = log_model.best_estimator_\n",
    "best_lr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:45:00.456241Z",
     "iopub.status.busy": "2024-04-18T21:45:00.455214Z",
     "iopub.status.idle": "2024-04-18T21:45:00.799457Z",
     "shell.execute_reply": "2024-04-18T21:45:00.798879Z",
     "shell.execute_reply.started": "2024-04-18T21:34:05.544482Z"
    },
    "papermill": {
     "duration": 0.419728,
     "end_time": "2024-04-18T21:45:00.799584",
     "exception": false,
     "start_time": "2024-04-18T21:45:00.379856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation accuracy of Logistic Regression is 0.8333333333333334\n",
      "\n",
      "Classification report :\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.62      0.77         8\n",
      "           1       0.77      1.00      0.87        10\n",
      "\n",
      "    accuracy                           0.83        18\n",
      "   macro avg       0.88      0.81      0.82        18\n",
      "weighted avg       0.87      0.83      0.82        18\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'ROC - CURVE & AREA UNDER CURVE')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x720 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Logistic Regression\n",
    "lr_model = LogisticRegression(C=0.1, solver='liblinear', penalty='l1')\n",
    "\n",
    "lr_model.fit(X_train_ov,y_train_ov)\n",
    "\n",
    "prediction=lr_model.predict(X_test_pca)\n",
    "\n",
    "acc_log = accuracy_score(prediction,y_test)\n",
    "print('Validation accuracy of Logistic Regression is', acc_log)\n",
    "print (\"\\nClassification report :\\n\",(classification_report(y_test,prediction)))\n",
    "\n",
    "#Confusion matrix\n",
    "plt.figure(figsize=(13,10))\n",
    "plt.subplot(221)\n",
    "sns.heatmap(confusion_matrix(y_test,prediction),annot=True,cmap=\"Greens\",fmt = \"d\",linecolor=\"k\",linewidths=3)\n",
    "plt.title(\"CONFUSION MATRIX\",fontsize=20)\n",
    "\n",
    "#ROC curve and Area under the curve plotting\n",
    "predicting_probabilites = lr_model.predict_proba(X_test_pca)[:,1]\n",
    "fpr,tpr,thresholds = roc_curve(y_test,predicting_probabilites)\n",
    "plt.subplot(222)\n",
    "plt.plot(fpr,tpr,label = (\"Area_under the curve :\",auc(fpr,tpr)),color = \"r\")\n",
    "plt.plot([1,0],[1,0],linestyle = \"dashed\",color =\"k\")\n",
    "plt.legend(loc = \"best\")\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title(\"ROC - CURVE & AREA UNDER CURVE\",fontsize=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.066987,
     "end_time": "2024-04-18T21:45:00.933705",
     "exception": false,
     "start_time": "2024-04-18T21:45:00.866718",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Hyperprameter optimization for Decision trees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:45:01.078996Z",
     "iopub.status.busy": "2024-04-18T21:45:01.076691Z",
     "iopub.status.idle": "2024-04-18T21:45:21.159732Z",
     "shell.execute_reply": "2024-04-18T21:45:21.160268Z",
     "shell.execute_reply.started": "2024-04-18T21:34:05.954670Z"
    },
    "papermill": {
     "duration": 20.162206,
     "end_time": "2024-04-18T21:45:21.160417",
     "exception": false,
     "start_time": "2024-04-18T21:45:00.998211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 2940 candidates, totalling 8820 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done 8820 out of 8820 | elapsed:   20.0s finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(max_depth=3, max_leaf_nodes=3, random_state=42)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params = {'max_leaf_nodes': list(range(2, 100)), 'min_samples_split': [2, 3, 4, 5, 6], 'max_depth':[3,4,5,6,7,8]}\n",
    "decision_search = GridSearchCV(DecisionTreeClassifier(random_state=42), params, verbose=1, cv=3)\n",
    "\n",
    "decision_search.fit(X_train_ov, y_train_ov)\n",
    "\n",
    "\n",
    "best_accuracy = decision_search.best_score_ #to get best score\n",
    "best_parameters = decision_search.best_params_ #to get best parameters\n",
    "# select best svc\n",
    "best_ds = decision_search.best_estimator_\n",
    "best_ds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:45:21.309718Z",
     "iopub.status.busy": "2024-04-18T21:45:21.309128Z",
     "iopub.status.idle": "2024-04-18T21:45:21.647673Z",
     "shell.execute_reply": "2024-04-18T21:45:21.647004Z",
     "shell.execute_reply.started": "2024-04-18T21:34:32.381541Z"
    },
    "papermill": {
     "duration": 0.418376,
     "end_time": "2024-04-18T21:45:21.647783",
     "exception": false,
     "start_time": "2024-04-18T21:45:21.229407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation accuracy of Decision Tree is 0.6111111111111112\n",
      "\n",
      "Classification report :\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.55      0.75      0.63         8\n",
      "           1       0.71      0.50      0.59        10\n",
      "\n",
      "    accuracy                           0.61        18\n",
      "   macro avg       0.63      0.62      0.61        18\n",
      "weighted avg       0.64      0.61      0.61        18\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'ROC - CURVE & AREA UNDER CURVE')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x720 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Decision Tree\n",
    "ds_model = DecisionTreeClassifier(max_depth=3, max_leaf_nodes=3, random_state=42)\n",
    "\n",
    "ds_model.fit(X_train_ov,y_train_ov)\n",
    "\n",
    "prediction=ds_model.predict(X_test_pca)\n",
    "\n",
    "acc_decision_tree = accuracy_score(prediction,y_test)\n",
    "print('Validation accuracy of Decision Tree is', acc_decision_tree)\n",
    "print (\"\\nClassification report :\\n\",(classification_report(y_test,prediction)))\n",
    "\n",
    "#Confusion matrix\n",
    "plt.figure(figsize=(13,10))\n",
    "plt.subplot(221)\n",
    "sns.heatmap(confusion_matrix(y_test,prediction),annot=True,cmap=\"Greens\",fmt = \"d\",linecolor=\"k\",linewidths=3)\n",
    "plt.title(\"CONFUSION MATRIX\",fontsize=20)\n",
    "\n",
    "#ROC curve and Area under the curve plotting\n",
    "predicting_probabilites = ds_model.predict_proba(X_test_pca)[:,1]\n",
    "fpr,tpr,thresholds = roc_curve(y_test,predicting_probabilites)\n",
    "plt.subplot(222)\n",
    "plt.plot(fpr,tpr,label = (\"Area_under the curve :\",auc(fpr,tpr)),color = \"r\")\n",
    "plt.plot([1,0],[1,0],linestyle = \"dashed\",color =\"k\")\n",
    "plt.legend(loc = \"best\")\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title(\"ROC - CURVE & AREA UNDER CURVE\",fontsize=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.068123,
     "end_time": "2024-04-18T21:45:21.784969",
     "exception": false,
     "start_time": "2024-04-18T21:45:21.716846",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Hyperprameter optimization for Random forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:45:21.932770Z",
     "iopub.status.busy": "2024-04-18T21:45:21.931681Z",
     "iopub.status.idle": "2024-04-18T21:49:34.448529Z",
     "shell.execute_reply": "2024-04-18T21:49:34.449036Z",
     "shell.execute_reply.started": "2024-04-18T21:34:32.819662Z"
    },
    "papermill": {
     "duration": 252.595757,
     "end_time": "2024-04-18T21:49:34.449199",
     "exception": false,
     "start_time": "2024-04-18T21:45:21.853442",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=False, max_features=0.6, min_samples_leaf=8,\n",
       "                       min_samples_split=3, n_estimators=70)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Hyperparameters search grid \n",
    "rf_param_grid = {'bootstrap': [False, True],\n",
    "         'n_estimators': [60, 70, 80, 90, 100],\n",
    "         'max_features': [0.6, 0.65, 0.7, 0.75, 0.8],\n",
    "         'min_samples_leaf': [8, 10, 12, 14],\n",
    "         'min_samples_split': [3, 5, 7]\n",
    "        }\n",
    "\n",
    "# Create the GridSearchCV object\n",
    "rf_search = GridSearchCV(estimator=RandomForestClassifier(), param_grid=rf_param_grid, cv=3, scoring='accuracy')\n",
    "rf_search.fit(X_train_ov, y_train_ov)\n",
    "\n",
    "best_accuracy = rf_search.best_score_ #to get best score\n",
    "best_parameters = rf_search.best_params_ #to get best parameters\n",
    "# select best svc\n",
    "best_rf = rf_search.best_estimator_\n",
    "best_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:49:34.656550Z",
     "iopub.status.busy": "2024-04-18T21:49:34.636639Z",
     "iopub.status.idle": "2024-04-18T21:49:35.069043Z",
     "shell.execute_reply": "2024-04-18T21:49:35.068380Z",
     "shell.execute_reply.started": "2024-04-18T21:39:41.595602Z"
    },
    "papermill": {
     "duration": 0.542133,
     "end_time": "2024-04-18T21:49:35.069192",
     "exception": false,
     "start_time": "2024-04-18T21:49:34.527059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation accuracy of RandomForest Classifier is 0.6666666666666666\n",
      "\n",
      "Classification report :\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.58      0.88      0.70         8\n",
      "           1       0.83      0.50      0.62        10\n",
      "\n",
      "    accuracy                           0.67        18\n",
      "   macro avg       0.71      0.69      0.66        18\n",
      "weighted avg       0.72      0.67      0.66        18\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'ROC - CURVE & AREA UNDER CURVE')"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x720 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Random forest\n",
    "rf_model = RandomForestClassifier(bootstrap=False, max_features=0.6, min_samples_leaf=8,\n",
    "                       min_samples_split=3, n_estimators=70)\n",
    "\n",
    "rf_model.fit(X_train_ov,y_train_ov)\n",
    "\n",
    "prediction=rf_model.predict(X_test_pca)\n",
    "\n",
    "acc_random_forest = accuracy_score(prediction,y_test)\n",
    "print('Validation accuracy of RandomForest Classifier is', acc_random_forest)\n",
    "print (\"\\nClassification report :\\n\",(classification_report(y_test,prediction)))\n",
    "\n",
    "#Confusion matrix\n",
    "plt.figure(figsize=(13,10))\n",
    "plt.subplot(221)\n",
    "sns.heatmap(confusion_matrix(y_test,prediction),annot=True,cmap=\"Greens\",fmt = \"d\",linecolor=\"k\",linewidths=3)\n",
    "plt.title(\"CONFUSION MATRIX\",fontsize=20)\n",
    "\n",
    "#ROC curve and Area under the curve plotting\n",
    "predicting_probabilites = rf_model.predict_proba(X_test_pca)[:,1]\n",
    "fpr,tpr,thresholds = roc_curve(y_test,predicting_probabilites)\n",
    "plt.subplot(222)\n",
    "plt.plot(fpr,tpr,label = (\"Area_under the curve :\",auc(fpr,tpr)),color = \"r\")\n",
    "plt.plot([1,0],[1,0],linestyle = \"dashed\",color =\"k\")\n",
    "plt.legend(loc = \"best\")\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title(\"ROC - CURVE & AREA UNDER CURVE\",fontsize=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.075638,
     "end_time": "2024-04-18T21:49:35.225699",
     "exception": false,
     "start_time": "2024-04-18T21:49:35.150061",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Hyperprameter optimization for XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:49:35.381064Z",
     "iopub.status.busy": "2024-04-18T21:49:35.380474Z",
     "iopub.status.idle": "2024-04-18T21:52:01.820421Z",
     "shell.execute_reply": "2024-04-18T21:52:01.821105Z",
     "shell.execute_reply.started": "2024-04-18T21:39:42.193664Z"
    },
    "papermill": {
     "duration": 146.526272,
     "end_time": "2024-04-18T21:52:01.821308",
     "exception": false,
     "start_time": "2024-04-18T21:49:35.295036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
       "              importance_type='gain', interaction_constraints='',\n",
       "              learning_rate=0.3, max_delta_step=0, max_depth=3,\n",
       "              min_child_weight=2, missing=nan, monotone_constraints='()',\n",
       "              n_estimators=40, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
       "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
       "              tree_method='exact', validate_parameters=1, verbosity=None)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgb_grid_params = {'max_depth': [3, 4, 5, 6, 7, 8, 10, 12],\n",
    "               'min_child_weight': [1, 2, 4, 6, 8, 10, 12, 15],\n",
    "               'n_estimators': [40, 50, 60, 70, 80, 90, 100, 110, 120, 130],\n",
    "               'learning_rate': [0.001, 0.01, 0.05, 0.1, 0.2, 0.3]}\n",
    "\n",
    "# Create the GridSearchCV object\n",
    "xgb_search = GridSearchCV(estimator=xgb.XGBClassifier(), param_grid=xgb_grid_params, cv=3, scoring='accuracy')\n",
    "xgb_search.fit(X_train_ov, y_train_ov)\n",
    "\n",
    "best_accuracy = xgb_search.best_score_ #to get best score\n",
    "best_parameters = xgb_search.best_params_ #to get best parameters\n",
    "# select best svc\n",
    "best_xgb = xgb_search.best_estimator_\n",
    "best_xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:52:02.003588Z",
     "iopub.status.busy": "2024-04-18T21:52:02.002810Z",
     "iopub.status.idle": "2024-04-18T21:52:02.405320Z",
     "shell.execute_reply": "2024-04-18T21:52:02.405808Z",
     "shell.execute_reply.started": "2024-04-18T21:43:19.140901Z"
    },
    "papermill": {
     "duration": 0.494749,
     "end_time": "2024-04-18T21:52:02.405958",
     "exception": false,
     "start_time": "2024-04-18T21:52:01.911209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation accuracy of XG Boost is 0.6111111111111112\n",
      "\n",
      "Classification report :\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.55      0.75      0.63         8\n",
      "           1       0.71      0.50      0.59        10\n",
      "\n",
      "    accuracy                           0.61        18\n",
      "   macro avg       0.63      0.62      0.61        18\n",
      "weighted avg       0.64      0.61      0.61        18\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'ROC - CURVE & AREA UNDER CURVE')"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x720 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#XB Boost\n",
    "xgb_model = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
    "              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
    "              importance_type='gain', interaction_constraints='',\n",
    "              learning_rate=0.001, max_delta_step=0, max_depth=3,\n",
    "              min_child_weight=1, monotone_constraints='()',\n",
    "              n_estimators=40, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
    "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
    "              tree_method='exact', validate_parameters=1, verbosity=None)\n",
    "\n",
    "xgb_model.fit(X_train_ov,y_train_ov)\n",
    "\n",
    "prediction=xgb_model.predict(X_test_pca)\n",
    "\n",
    "acc_xgb = accuracy_score(prediction,y_test)\n",
    "print('Validation accuracy of XG Boost is', acc_xgb)\n",
    "print (\"\\nClassification report :\\n\",(classification_report(y_test,prediction)))\n",
    "\n",
    "#Confusion matrix\n",
    "plt.figure(figsize=(13,10))\n",
    "plt.subplot(221)\n",
    "sns.heatmap(confusion_matrix(y_test,prediction),annot=True,cmap=\"Greens\",fmt = \"d\",linecolor=\"k\",linewidths=3)\n",
    "plt.title(\"CONFUSION MATRIX\",fontsize=20)\n",
    "\n",
    "#ROC curve and Area under the curve plotting\n",
    "predicting_probabilites = xgb_model.predict_proba(X_test_pca)[:,1]\n",
    "fpr,tpr,thresholds = roc_curve(y_test,predicting_probabilites)\n",
    "plt.subplot(222)\n",
    "plt.plot(fpr,tpr,label = (\"Area_under the curve :\",auc(fpr,tpr)),color = \"r\")\n",
    "plt.plot([1,0],[1,0],linestyle = \"dashed\",color =\"k\")\n",
    "plt.legend(loc = \"best\")\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title(\"ROC - CURVE & AREA UNDER CURVE\",fontsize=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:52:02.565125Z",
     "iopub.status.busy": "2024-04-18T21:52:02.564404Z",
     "iopub.status.idle": "2024-04-18T21:52:03.055059Z",
     "shell.execute_reply": "2024-04-18T21:52:03.055593Z",
     "shell.execute_reply.started": "2024-04-18T21:43:19.651807Z"
    },
    "papermill": {
     "duration": 0.576472,
     "end_time": "2024-04-18T21:52:03.055730",
     "exception": false,
     "start_time": "2024-04-18T21:52:02.479258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation accuracy of Naive Bayes is 0.8888888888888888\n",
      "\n",
      "Classification report :\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.88      0.88         8\n",
      "           1       0.90      0.90      0.90        10\n",
      "\n",
      "    accuracy                           0.89        18\n",
      "   macro avg       0.89      0.89      0.89        18\n",
      "weighted avg       0.89      0.89      0.89        18\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'ROC - CURVE & AREA UNDER CURVE')"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x720 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "#In case of naive Bayes, there isn't a hyper-parameter to tune, so you have nothing to grid search over.\n",
    "nb_model = GaussianNB()\n",
    "\n",
    "nb_model.fit(X_train_ov,y_train_ov)\n",
    "\n",
    "prediction=nb_model.predict(X_test_pca)\n",
    "\n",
    "acc_nb = accuracy_score(prediction,y_test)\n",
    "print('Validation accuracy of Naive Bayes is', acc_nb)\n",
    "print (\"\\nClassification report :\\n\",(classification_report(y_test,prediction)))\n",
    "\n",
    "#Confusion matrix\n",
    "plt.figure(figsize=(13,10))\n",
    "plt.subplot(221)\n",
    "sns.heatmap(confusion_matrix(y_test,prediction),annot=True,cmap=\"Greens\",fmt = \"d\",linecolor=\"k\",linewidths=3)\n",
    "plt.title(\"CONFUSION MATRIX\",fontsize=20)\n",
    "\n",
    "#ROC curve and Area under the curve plotting\n",
    "predicting_probabilites = nb_model.predict_proba(X_test_pca)[:,1]\n",
    "fpr,tpr,thresholds = roc_curve(y_test,predicting_probabilites)\n",
    "plt.subplot(222)\n",
    "plt.plot(fpr,tpr,label = (\"Area_under the curve :\",auc(fpr,tpr)),color = \"r\")\n",
    "plt.plot([1,0],[1,0],linestyle = \"dashed\",color =\"k\")\n",
    "plt.legend(loc = \"best\")\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title(\"ROC - CURVE & AREA UNDER CURVE\",fontsize=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.076613,
     "end_time": "2024-04-18T21:52:03.211794",
     "exception": false,
     "start_time": "2024-04-18T21:52:03.135181",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Model evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.07394,
     "end_time": "2024-04-18T21:52:03.359611",
     "exception": false,
     "start_time": "2024-04-18T21:52:03.285671",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can now rank our evaluation of all the models to choose the best one for our problem. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:52:03.522825Z",
     "iopub.status.busy": "2024-04-18T21:52:03.522036Z",
     "iopub.status.idle": "2024-04-18T21:52:03.525815Z",
     "shell.execute_reply": "2024-04-18T21:52:03.525213Z",
     "shell.execute_reply.started": "2024-04-18T21:43:20.078089Z"
    },
    "papermill": {
     "duration": 0.091323,
     "end_time": "2024-04-18T21:52:03.525917",
     "exception": false,
     "start_time": "2024-04-18T21:52:03.434594",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Naive Bayes</td>\n",
       "      <td>0.888889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>0.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>KNN</td>\n",
       "      <td>0.777778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Support Vector Machines</td>\n",
       "      <td>0.722222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.611111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>XG Boost</td>\n",
       "      <td>0.611111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Model     Score\n",
       "6              Naive Bayes  0.888889\n",
       "2      Logistic Regression  0.833333\n",
       "1                      KNN  0.777778\n",
       "0  Support Vector Machines  0.722222\n",
       "4            Random Forest  0.666667\n",
       "3            Decision Tree  0.611111\n",
       "5                 XG Boost  0.611111"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "models = pd.DataFrame({\n",
    "    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', 'Decision Tree',\n",
    "              'Random Forest', 'XG Boost', 'Naive Bayes'],\n",
    "\n",
    "    'Score': [acc_svc, acc_knn, acc_log, acc_decision_tree, \n",
    "              acc_random_forest, acc_xgb, acc_nb]})\n",
    "models.sort_values(by='Score', ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.077137,
     "end_time": "2024-04-18T21:52:03.679353",
     "exception": false,
     "start_time": "2024-04-18T21:52:03.602216",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can observe here Navive Bayes and Logistic regression gave us the maximum accuracy of 94.4% and 83.3% respectively while that of SVM, Descision tree, Random forest and XG Boost remains 72.2%. You can fine tune these models even further to get even better accuracy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.075231,
     "end_time": "2024-04-18T21:52:03.829131",
     "exception": false,
     "start_time": "2024-04-18T21:52:03.753900",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Ensemble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:52:03.991735Z",
     "iopub.status.busy": "2024-04-18T21:52:03.990799Z",
     "iopub.status.idle": "2024-04-18T21:52:03.993680Z",
     "shell.execute_reply": "2024-04-18T21:52:03.993117Z",
     "shell.execute_reply.started": "2024-04-18T21:43:20.100046Z"
    },
    "papermill": {
     "duration": 0.088739,
     "end_time": "2024-04-18T21:52:03.993780",
     "exception": false,
     "start_time": "2024-04-18T21:52:03.905041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "best_svc = SVC(C=1, kernel='linear',probability=True)\n",
    "best_knn = KNeighborsClassifier(algorithm='ball_tree', leaf_size=1, n_neighbors=1, weights='distance')\n",
    "best_lr = LogisticRegression(C=0.1, solver='liblinear', penalty='l1')\n",
    "best_dt = DecisionTreeClassifier(max_depth=3, max_leaf_nodes=3, random_state=42)\n",
    "best_rf = rf_model = RandomForestClassifier(bootstrap=False, max_features=0.6, min_samples_leaf=8,min_samples_split=3, n_estimators=70)\n",
    "best_xgb = xgb_model = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
    "              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
    "              importance_type='gain', interaction_constraints='',\n",
    "              learning_rate=0.001, max_delta_step=0, max_depth=3,\n",
    "              min_child_weight=1, monotone_constraints='()',\n",
    "              n_estimators=40, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
    "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
    "              tree_method='exact', validate_parameters=1, verbosity=None)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:52:04.153482Z",
     "iopub.status.busy": "2024-04-18T21:52:04.152542Z",
     "iopub.status.idle": "2024-04-18T21:52:04.155408Z",
     "shell.execute_reply": "2024-04-18T21:52:04.154788Z",
     "shell.execute_reply.started": "2024-04-18T21:43:20.116977Z"
    },
    "papermill": {
     "duration": 0.084298,
     "end_time": "2024-04-18T21:52:04.155512",
     "exception": false,
     "start_time": "2024-04-18T21:52:04.071214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import VotingClassifier\n",
    "\n",
    "classifiers = [\n",
    "    ('nb', GaussianNB()),\n",
    "    ('lr', best_lr),\n",
    "    ('knn', best_knn),\n",
    "    ('svm', best_svc),\n",
    "    ('rf', best_rf),\n",
    "    ('dt', best_dt),\n",
    "    ('xgb', best_xgb),\n",
    "]\n",
    "\n",
    "voting_clf = VotingClassifier(estimators=classifiers, voting='soft')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:52:04.309656Z",
     "iopub.status.busy": "2024-04-18T21:52:04.308759Z",
     "iopub.status.idle": "2024-04-18T21:52:04.451891Z",
     "shell.execute_reply": "2024-04-18T21:52:04.452503Z",
     "shell.execute_reply.started": "2024-04-18T21:43:20.136215Z"
    },
    "papermill": {
     "duration": 0.222836,
     "end_time": "2024-04-18T21:52:04.452665",
     "exception": false,
     "start_time": "2024-04-18T21:52:04.229829",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "voting_clf.fit(X_train_ov,y_train_ov)\n",
    "predictions = voting_clf.predict(X_test_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:52:04.661152Z",
     "iopub.status.busy": "2024-04-18T21:52:04.660035Z",
     "iopub.status.idle": "2024-04-18T21:52:04.667742Z",
     "shell.execute_reply": "2024-04-18T21:52:04.667265Z",
     "shell.execute_reply.started": "2024-04-18T21:43:20.331124Z"
    },
    "papermill": {
     "duration": 0.11165,
     "end_time": "2024-04-18T21:52:04.667843",
     "exception": false,
     "start_time": "2024-04-18T21:52:04.556193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation accuracy of Ensemble is 0.8888888888888888\n",
      "\n",
      "Classification report :\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.88      0.88         8\n",
      "           1       0.90      0.90      0.90        10\n",
      "\n",
      "    accuracy                           0.89        18\n",
      "   macro avg       0.89      0.89      0.89        18\n",
      "weighted avg       0.89      0.89      0.89        18\n",
      "\n"
     ]
    }
   ],
   "source": [
    "acc_vot = accuracy_score(prediction,y_test)\n",
    "print('Validation accuracy of Ensemble is', acc_vot)\n",
    "print (\"\\nClassification report :\\n\",(classification_report(y_test,prediction)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:52:04.828595Z",
     "iopub.status.busy": "2024-04-18T21:52:04.827884Z",
     "iopub.status.idle": "2024-04-18T21:52:04.929664Z",
     "shell.execute_reply": "2024-04-18T21:52:04.930367Z",
     "shell.execute_reply.started": "2024-04-18T21:43:20.349846Z"
    },
    "papermill": {
     "duration": 0.187324,
     "end_time": "2024-04-18T21:52:04.930533",
     "exception": false,
     "start_time": "2024-04-18T21:52:04.743209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import BaggingClassifier\n",
    "\n",
    "bagging_clf = BaggingClassifier(base_estimator=GaussianNB(), n_estimators=50)\n",
    "\n",
    "bagging_clf.fit(X_train_ov,y_train_ov)\n",
    "predictions = bagging_clf.predict(X_test_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:52:05.092044Z",
     "iopub.status.busy": "2024-04-18T21:52:05.091173Z",
     "iopub.status.idle": "2024-04-18T21:52:05.097529Z",
     "shell.execute_reply": "2024-04-18T21:52:05.096886Z",
     "shell.execute_reply.started": "2024-04-18T21:43:20.511911Z"
    },
    "papermill": {
     "duration": 0.090244,
     "end_time": "2024-04-18T21:52:05.097631",
     "exception": false,
     "start_time": "2024-04-18T21:52:05.007387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation accuracy of Bagging is 0.8888888888888888\n",
      "\n",
      "Classification report :\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.88      0.88         8\n",
      "           1       0.90      0.90      0.90        10\n",
      "\n",
      "    accuracy                           0.89        18\n",
      "   macro avg       0.89      0.89      0.89        18\n",
      "weighted avg       0.89      0.89      0.89        18\n",
      "\n"
     ]
    }
   ],
   "source": [
    "acc_bag = accuracy_score(prediction,y_test)\n",
    "print('Validation accuracy of Bagging is', acc_bag)\n",
    "print (\"\\nClassification report :\\n\",(classification_report(y_test,prediction)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:52:05.254880Z",
     "iopub.status.busy": "2024-04-18T21:52:05.254279Z",
     "iopub.status.idle": "2024-04-18T21:52:05.337644Z",
     "shell.execute_reply": "2024-04-18T21:52:05.338104Z",
     "shell.execute_reply.started": "2024-04-18T21:43:20.531729Z"
    },
    "papermill": {
     "duration": 0.165482,
     "end_time": "2024-04-18T21:52:05.338234",
     "exception": false,
     "start_time": "2024-04-18T21:52:05.172752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load libraries\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "# Create adaboost classifer object\n",
    "adaboost_clf =AdaBoostClassifier(n_estimators=50, base_estimator=GaussianNB(), learning_rate=1)\n",
    "\n",
    "adaboost_clf.fit(X_train_ov,y_train_ov)\n",
    "predictions = adaboost_clf.predict(X_test_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T21:52:05.496659Z",
     "iopub.status.busy": "2024-04-18T21:52:05.495963Z",
     "iopub.status.idle": "2024-04-18T21:52:05.505429Z",
     "shell.execute_reply": "2024-04-18T21:52:05.504836Z",
     "shell.execute_reply.started": "2024-04-18T21:43:20.651176Z"
    },
    "papermill": {
     "duration": 0.092204,
     "end_time": "2024-04-18T21:52:05.505541",
     "exception": false,
     "start_time": "2024-04-18T21:52:05.413337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation accuracy of Boosting is 0.8888888888888888\n",
      "\n",
      "Classification report :\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.88      0.88         8\n",
      "           1       0.90      0.90      0.90        10\n",
      "\n",
      "    accuracy                           0.89        18\n",
      "   macro avg       0.89      0.89      0.89        18\n",
      "weighted avg       0.89      0.89      0.89        18\n",
      "\n"
     ]
    }
   ],
   "source": [
    "acc_adb = accuracy_score(prediction,y_test)\n",
    "print('Validation accuracy of Boosting is', acc_adb)\n",
    "print (\"\\nClassification report :\\n\",(classification_report(y_test,prediction)))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1868,
     "sourceId": 3249,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30042,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "papermill": {
   "duration": 445.460909,
   "end_time": "2024-04-18T21:52:05.687515",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-18T21:44:40.226606",
   "version": "2.1.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
